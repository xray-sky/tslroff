# ul.rb
# -------------
#   troff
# -------------
#
#   ยง10.3
#
# Request  Initial  If no     Notes   Explanation
#  form     value   argument
#
# .ul N    off      N=1       E       Underline in nroff (italicize in troff) the next N
#                                     input text lines. Actually, switch to the underline
#                                     font, saving the current font for later restoration;
#                                     other font changes within the span of a .ul will
#                                     take effect, but the restoration will undo the last
#                                     change. Output generated by .tl is affected by the
#                                     font change, but does not decrement N. (See section
#                                     14, "Three Part Titles.") If N>1, there is a risk
#                                     that the trap-invoked macro may provide text lines
#                                     within the span; environment switching can prevent
#                                     this.
#
# .cu N    off      N=1       E      A variant of .ul that causes every character to be
#                                    underlined and causes no line breaks to occur in the
#                                    affected input lines. That is, each output space
#                                    following .cu is like an unpaddable space. .cu is
#                                    identical to .ul in troff.
#
# .uf F    Italic   Italic    -      Underline font set to F. In nroff, F may not be on
#                                    position 1 (initially Times Roman).
#
#  REVIEW what happens when given not-an-N as first arg (invalid expression)
#         ignored, I think, which means bad interaction from to_u returning '0' in that case
#
#  TODO - figure out if the .tl / trap-invoked macro / environment switching part
#         matters to us in any way.
#

module Troff
  def req_ul(argstr = '', breaking: nil)
    n = argstr.split.first || '1'
    req_ft @state[:ul_font]
    req_it "#{n} [U"
  end

  def req_uf(argstr = '', breaking: nil)
    pos = argstr.slice(0, 2).strip
    # REVIEW does this actually get some other font mounted on position 2?
    @state[:ul_font] = case pos
                       when ''     then 'I'
                       when /^\d$/ then @state[:fonts][pos.to_i]
                       else        pos
                       end
  end

  #def finalize_ul
  define_method "[U" do |argstr = '', breaking: nil|
    req_ft
  end

  def init_ul
    @state[:ul_font] = 'I'
  end

  alias_method :req_cu, :req_ul
end
